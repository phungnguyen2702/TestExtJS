<div id="table_products"></div>
<script>
  var data_url = '<%= products_path(format: :json) %>';//url json file
  var update_url = '<%= update_extjs_path %>'
  var create_url = '<%= create_extjs_path %>'
  var destroy_url = '<%= destroy_extjs_path %>'

  //import data from json file to variable store
var store = new Ext.data.JsonStore({
  url: data_url,
  //choice field 
  fields: [
    'id',
    'title',
    'image',
    'description',
    'price'
  ]
});

store.load();
//editor 
var text_edit = new Ext.form.TextField();
var number_edit = new Ext.form.NumberField();
var bool_edit;
//new row
var ds_model = Ext.data.Record.create([
  'id',
  'title',
  'image',
  'description',
  {name: 'price', type: 'float'},
  {name: 'Delete', type: 'bool'}
]);

var form_create = new  Ext.Window({
  title: 'New Product',
  layout: 'form',
  autoScroll: true,
  y: 120,
  width: 300,
  height: 170,
  modal: true,
  items: [{
    xtype: 'textfield',
    fieldLabel: 'Title',
    emptyText: 'Title',
    allowBlank: false,
    id: 'title',
    width: 180
  },
  {
    xtype: 'textfield',
    fieldLabel: 'Image',
    id: 'image',
    width: 180
  },
  {
    xtype: 'textfield',
    fieldLabel: 'Description',
    id: 'description',
    width: 180
  },
  {
    xtype: 'numberfield',
    fieldLabel: 'Price',
    id: 'price',
    width: 180
  }],
  buttons: [{
    text: 'Create',
    key: Ext.EventObject.ENTER,
    handler: function(){
      var title = Ext.getCmp('title').getValue();
      var price = Ext.getCmp('price').getValue();
      Ext.Ajax.request({
        url: create_url,
        params: {
            action: 'create',
            title: title,
            image: Ext.getCmp('image').getValue(),
            description: Ext.getCmp('description').getValue(),
            price: price
        },
        success: function(resp,opt){
          if(title==''|| Number.isNaN(parseInt(price)) == true)
          {
          } else {
            store.reload();
            var insert_id = Ext.util.JSON.decode(
              resp.responseText
            ).insert_id;
            grid.getStore().insert(
              grid.getStore().getCount(),
              new ds_model
            );
            grid.startEditing(grid.getStore().getCount()-1,0);
          }
                
    form_create.close();
        },
        failure: function(resp,opt) {
          Ext.Msg.alert('Error','Unable to add product');
        }
      });
      
    form_create.close();
  }
  },{
    text: 'Cancel',
    handler: function(){
      form_create.close();
    }
  }]
});

Ext.onReady( function(){
  var grid = new Ext.grid.EditorGridPanel({
    listeners: {
      afteredit: function(e){
        Ext.Ajax.request({
          url: update_url,
          method: 'POST',
          params: {
            id: e.record.id,
            field: e.field,
            value: e.value
          },
          success: function(resp,opt) {
            e.record.commit();
          },
          failure: function(resp,opt) {
            e.record.reject();
          }
        });
      }
    },
    renderTo:  Ext.get("table_products"),
    frame:true,
    title: 'Product Database',
    height:650,
    width:520,
    store: store,
    clickstoEdit: 0,
    columns: [
      {id: 'ID', dataIndex: 'id', sortable: true, width: 40},
      {header: 'Title', dataIndex: "title", sortable: true, editor: text_edit},
      {header: 'Image', dataIndex: 'image', sortable: true, editor: text_edit},
      {header: 'Description', dataIndex: 'description', sortable: true, editor: text_edit},
      {header: 'Price', dataIndex: 'price', sortable: true, editor: number_edit},
      {header: 'Delete', dataIndex: 'Delete', width: 55, sortable: true,renderer: function(value, cell) {
        var cb = new Ext.form.Checkbox(
            {
                hideLabel: true,
                renderTo: cell,
                checked: value
            }
        );
    }}
    ],
    tbar:[
      {
        text: 'Add',
        cls: 'x-btn-text-icon',
        handler: function(){
          Ext.Ajax.request({
            url: create_url,
            params: {
              params: {
                action: 'create',
                title: '',
                image: '',
                description: '',
                price: 0
              },
            },
            success: function(resp,opt){
              store.reload();
              var insert_id = Ext.util.JSON.decode(
                resp.responseText
              ).insert_id;
              grid.getStore().insert(
                grid.getStore().getCount(),
                new ds_model
              );
              grid.startEditing(grid.getStore().getCount()-1,0);
            },
            failure: function(resp,opt) {
              Ext.Msg.alert('Error','Unable to add product');
            }
          });
        } 
      },
      {
        text: 'Delete',
        cls: 'x-btn-text-icon',
        handler: function(){
          Ext.Msg.show({
            title: 'Remove Product',
            buttons: Ext.MessageBox.YESNOCANCEL,
            msg: 'You want to Remove ?',
            fn: function(btn){
              if (btn == 'yes'){
                Ext.Ajax.request({
                  url: destroy_url,
                  method: 'POST',
                  params: {
                    action: 'delete',
                  },
                  success: function(resp,opt){
                    store.reload();                        
                  },
                  failure: function(resp,opt){
                    Ext.Msg.alert('Error', 'Unable to delete product');
                  }
                });
              }
            }
          });
        }
      },
      {
        text: 'Add Form',
        cls: 'x-btn-text-icon',
        handler: function(){
          //form_create.close();
          form_create.show();
        }
      }
    ],
  });
});
</script>